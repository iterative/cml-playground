on: push
permissions:
  id-token: write
jobs:
  as-oidc:
    runs-on: ubuntu-latest
    steps:
      run: |
        export TOKEN="$(curl --header "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=projects/200200923017/locations/global/workloadIdentityPools/gh-actions-pool/providers/github-actions" | jq --raw-output .value)"
        printenv script | python3
      env:
        script: |

          options = {
          "workload_identity_provider": "projects/200200923017/locations/global/workloadIdentityPools/gh-actions-pool/providers/github-actions"
          "service_account": "cml-runner@cml-pulse.iam.gserviceaccount.com"
          }
          
          provider = self.options["provider_id"]
          account = self.options["service_account_email"]
  
          audience = f"//iam.googleapis.com/{provider}"
          id_token = os.getenv("TOKEN")
  
          import requests
  
          federated_token = (
              requests.post(
                  "https://sts.googleapis.com/v1/token",
                  headers={"accept": "application/json"},
                  json={
                      "audience": audience,
                      "grantType": "urn:ietf:params:oauth:grant-type:token-exchange",
                      "requestedTokenType": "urn:ietf:params:oauth:token-type:access_token",
                      "scope": (scope := "https://www.googleapis.com/auth/cloud-platform"),
                      "subjectTokenType": "urn:ietf:params:oauth:token-type:jwt",
                      "subjectToken": id_token,
                  },
              )
              .json()
              .get("access_token")
          )
  
          access_token = (
              requests.post(
                  f"https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/{account}:generateAccessToken",
                  json={"scope": [scope], "lifetime": self.expiration.total_seconds()},
                  headers={
                      "accept": "application/json",
                      "authorization": f"bearer {federated_token}",
                  },
              )
              .json()
              .get("accessToken")
          )

          print(access_token)
          return {"credentials": access_token}
